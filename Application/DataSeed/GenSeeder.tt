<#
    var tables = new []
    {
        ("Address"               , 100 , null          ) ,
        ("PaymentProvider"       , 100 , null          ) ,
        ("CreditCard"            , 2   , null          ) ,
        ("TaxRate"               , 100 , null          ) ,
        ("Product"               , 100 , null          ) ,
        ("DiscountOffer"         , 100 , null          ) ,
        ("ProductDiscountOffer"  , 100 , null          ) ,
        ("UserProductReview"     , 100 , "ProductId"   ) ,
    }; 
//Credit card 2
string ToUpper(string str)
{
    if (string.IsNullOrEmpty(str))
        return string.Empty;
    return char.ToUpper(str[0]) + str.Substring(1);
}

#>
/**********************************************************
*  This code is generated by custom T4 (.tt) template 
**********************************************************/
using Poseidon.Domain;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;

namespace Poseidon.Application.DataSeed;

public partial class SampleDataSeeder
{
 <# foreach (var (nm, count, distinct) in tables) { #> 
    public async Task SeedAndSave<#= nm#>(int userId)
    {
        var <#= nm.ToLower()#> = DataGen<<#= nm#>>.Generate( userId , <#= count#>); 

 <# if (distinct is not null){ #>
        <#= nm.ToLower()#> = <#= nm.ToLower()#>.DistinctBy(d => d.<#= distinct#>).ToList();
<#} #>

        _logger.LogInformation($" Counting {<#= nm.ToLower()#>.Count} <#= nm.ToLower() #> data...");

        _context.<#= nm #>
        .AddRange(<#= nm.ToLower() #>);

        await _context.SaveChangesAsync(default);
    }
<# } #> 

    public async Task SeedAndSaveTestData()
    { 
        var users = _context.User
        .AsNoTracking()
        .ToArray();

        try{

            foreach (var user in users)
            {<# foreach (var (nm, count, distinct) in tables) { #>   
                 _logger.LogInformation("Seeding <#= nm.ToLower() #> data...");
                 await SeedAndSave<#= nm#>(user.UserId);
<# } #>  
            }
        }
        catch (Exception ex)
        { 
            _logger.LogError(ex, "Error occured during data seed execution");
        }
        
    }
}




