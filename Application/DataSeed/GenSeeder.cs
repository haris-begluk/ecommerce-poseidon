/**********************************************************
*  This code is generated by custom T4 (.tt) template 
**********************************************************/
using Poseidon.Domain;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;

namespace Poseidon.Application.DataSeed;

public partial class SampleDataSeeder
{
  
    public async Task SeedAndSaveAddress(int userId)
    {
        var address = DataGen<Address>.Generate( userId , 100); 

 
        _logger.LogInformation($" Counting {address.Count} address data...");

        _context.Address
        .AddRange(address);

        await _context.SaveChangesAsync(default);
    }
 
    public async Task SeedAndSavePaymentProvider(int userId)
    {
        var paymentprovider = DataGen<PaymentProvider>.Generate( userId , 100); 

 
        _logger.LogInformation($" Counting {paymentprovider.Count} paymentprovider data...");

        _context.PaymentProvider
        .AddRange(paymentprovider);

        await _context.SaveChangesAsync(default);
    }
 
    public async Task SeedAndSaveCreditCard(int userId)
    {
        var creditcard = DataGen<CreditCard>.Generate( userId , 2); 

 
        _logger.LogInformation($" Counting {creditcard.Count} creditcard data...");

        _context.CreditCard
        .AddRange(creditcard);

        await _context.SaveChangesAsync(default);
    }
 
    public async Task SeedAndSaveTaxRate(int userId)
    {
        var taxrate = DataGen<TaxRate>.Generate( userId , 100); 

 
        _logger.LogInformation($" Counting {taxrate.Count} taxrate data...");

        _context.TaxRate
        .AddRange(taxrate);

        await _context.SaveChangesAsync(default);
    }
 
    public async Task SeedAndSaveProduct(int userId)
    {
        var product = DataGen<Product>.Generate( userId , 100); 

 
        _logger.LogInformation($" Counting {product.Count} product data...");

        _context.Product
        .AddRange(product);

        await _context.SaveChangesAsync(default);
    }
 
    public async Task SeedAndSaveDiscountOffer(int userId)
    {
        var discountoffer = DataGen<DiscountOffer>.Generate( userId , 100); 

 
        _logger.LogInformation($" Counting {discountoffer.Count} discountoffer data...");

        _context.DiscountOffer
        .AddRange(discountoffer);

        await _context.SaveChangesAsync(default);
    }
 
    public async Task SeedAndSaveProductDiscountOffer(int userId)
    {
        var productdiscountoffer = DataGen<ProductDiscountOffer>.Generate( userId , 100); 

 
        _logger.LogInformation($" Counting {productdiscountoffer.Count} productdiscountoffer data...");

        _context.ProductDiscountOffer
        .AddRange(productdiscountoffer);

        await _context.SaveChangesAsync(default);
    }
 
    public async Task SeedAndSaveUserProductReview(int userId)
    {
        var userproductreview = DataGen<UserProductReview>.Generate( userId , 100); 

         userproductreview = userproductreview.DistinctBy(d => d.ProductId).ToList();

        _logger.LogInformation($" Counting {userproductreview.Count} userproductreview data...");

        _context.UserProductReview
        .AddRange(userproductreview);

        await _context.SaveChangesAsync(default);
    }
 

    public async Task SeedAndSaveTestData()
    { 
        var users = _context.User
        .AsNoTracking()
        .ToArray();

        try{

            foreach (var user in users)
            {   
                 _logger.LogInformation("Seeding address data...");
                 await SeedAndSaveAddress(user.UserId);
   
                 _logger.LogInformation("Seeding paymentprovider data...");
                 await SeedAndSavePaymentProvider(user.UserId);
   
                 _logger.LogInformation("Seeding creditcard data...");
                 await SeedAndSaveCreditCard(user.UserId);
   
                 _logger.LogInformation("Seeding taxrate data...");
                 await SeedAndSaveTaxRate(user.UserId);
   
                 _logger.LogInformation("Seeding product data...");
                 await SeedAndSaveProduct(user.UserId);
   
                 _logger.LogInformation("Seeding discountoffer data...");
                 await SeedAndSaveDiscountOffer(user.UserId);
   
                 _logger.LogInformation("Seeding productdiscountoffer data...");
                 await SeedAndSaveProductDiscountOffer(user.UserId);
   
                 _logger.LogInformation("Seeding userproductreview data...");
                 await SeedAndSaveUserProductReview(user.UserId);
  
            }
        }
        catch (Exception ex)
        { 
            _logger.LogError(ex, "Error occured during data seed execution");
        }
        
    }
}




